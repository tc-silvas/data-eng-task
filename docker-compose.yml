services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  producer:
    build:
      context: producer/
    container_name: kafka-producer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - app-network

  spark-master:
    container_name: spark-master
    image: spark_master
    entrypoint: [ './entrypoint.sh', 'master' ]
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 5s
      timeout: 3s
      retries: 3
    volumes:
      - ./events:/opt/spark/events
      - spark-logs:/opt/spark/spark-events
      - ./spark/spark-processor/target/scala-2.12:/opt/spark/apps
    env_file:
      - .env.spark
    ports:
      - '8080:8080'
      - '7077:7077'
    networks:
      - app-network

  spark-history-server:
    container_name: spark-history
    image: spark_master
    entrypoint: [ './entrypoint.sh', 'history' ]
    depends_on:
      spark-master:
        condition: service_healthy
    env_file:
      - .env.spark
    volumes:
      - spark-logs:/opt/spark/spark-events
    ports:
      - '18080:18080'
    networks:
      - app-network

  spark-worker:
    container_name: spark-worker
    image: spark_master
    entrypoint: [ './entrypoint.sh', 'worker' ]
    depends_on:
      spark-master:
        condition: service_healthy
    env_file:
      - .env.spark
    volumes:
      - ./events:/opt/spark/events
      - spark-logs:/opt/spark/spark-events
      - ./spark/spark-processor/target/scala-2.12:/opt/spark/apps
    networks:
      - app-network

  postgres:
    image: postgres:14.15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: game-events
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  spark-logs:
